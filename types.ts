/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auth:Jwt.Login */
        post: operations["auth_jwt_login_api_v1_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auth:Jwt.Logout */
        post: operations["auth_jwt_logout_api_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register:Register */
        post: operations["register_register_api_v1_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/request-verify-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify:Request-Token */
        post: operations["verify_request_token_api_v1_auth_request_verify_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify:Verify */
        post: operations["verify_verify_api_v1_auth_verify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset:Forgot Password */
        post: operations["reset_forgot_password_api_v1_auth_forgot_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset:Reset Password */
        post: operations["reset_reset_password_api_v1_auth_reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/authenticated-route": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Authenticated Route */
        get: operations["authenticated_route_api_v1_auth_authenticated_route_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Tokens */
        post: operations["refresh_tokens_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users
         * @description Retrieve a list of users from the database, if current user is superuser.
         */
        get: operations["get_users_api_v1_users__get"];
        put?: never;
        /**
         * Create User
         * @description Create a new user in the database, if current user is superuser.
         */
        post: operations["create_user_api_v1_users__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Me
         * @description Retrieve current active user from the database.
         */
        get: operations["get_me_api_v1_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Me
         * @description Update current active user from the database.
         */
        patch: operations["update_me_api_v1_users_me_patch"];
        trace?: never;
    };
    "/api/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Retrieve user from the database by the user ID, if it is current user, or user is superuser.
         */
        get: operations["get_user_api_v1_users__user_id__get"];
        put?: never;
        post?: never;
        /**
         * Update User
         * @description Delete user on the database by the user ID, if it is current user, or user is superuser.
         */
        delete: operations["update_user_api_v1_users__user_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update User
         * @description Update user on the database by the user ID, to `user_data` if it is current user, or current user is superuser.
         */
        patch: operations["update_user_api_v1_users__user_id__patch"];
        trace?: never;
    };
    "/api/v1/counterparties/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Counterparties
         * @description Retrieve a list of counterparties from the database by the current user ID, type, or all if current user is superuser.
         */
        get: operations["get_counterparties_api_v1_counterparties__get"];
        put?: never;
        /**
         * Create Counterparty
         * @description Create a new counterparty in the database with the current user ID.
         */
        post: operations["create_counterparty_api_v1_counterparties__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/counterparties/with-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Counterparties With Status
         * @description Retrieve a list of counterparties from the database by the current user ID, type, or all if current user is superuser.
         */
        get: operations["get_counterparties_with_status_api_v1_counterparties_with_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/counterparties/{counterparty_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Counterparty
         * @description Retrieve counterparty from the database by the counterparty ID, if current user is partner of counterparty.
         */
        get: operations["get_counterparty_api_v1_counterparties__counterparty_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Counterparty
         * @description Delete counterparty on the database by the counterparty ID, if current user is partner of counterparty.
         */
        delete: operations["delete_counterparty_api_v1_counterparties__counterparty_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Counterparty
         * @description Update counterparty on the database by the counterparty ID, to `counterparty_data` if current user is partner of counterparty.
         */
        patch: operations["update_counterparty_api_v1_counterparties__counterparty_id__patch"];
        trace?: never;
    };
    "/api/v1/counterparties/{counterparty_id}/with-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Counterparty With Status
         * @description Retrieve counterparty from the database with status by the counterparty ID, if current user is partner of counterparty.
         */
        get: operations["get_counterparty_with_status_api_v1_counterparties__counterparty_id__with_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Products
         * @description Retrieve a list of products from the database by the current user ID, or all if current user is superuser.
         */
        get: operations["get_products_api_v1_products__get"];
        put?: never;
        /**
         * Create Product
         * @description Create a new product in the database with the current user ID.
         */
        post: operations["create_product_api_v1_products__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/with-quantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Products With Quantity
         * @description Retrieve a list of products from the database by the current user ID, or all if current user is superuser.
         */
        get: operations["get_products_with_quantity_api_v1_products_with_quantity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product
         * @description Retrieve product from the database by the product ID, if current user is owner of product.
         */
        get: operations["get_product_api_v1_products__product_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Product
         * @description Delete product on the database by the product ID, if current user is owner of product.
         */
        delete: operations["delete_product_api_v1_products__product_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Product
         * @description Update product on the database by the product ID, to `product_data` if current user is owner of product.
         */
        patch: operations["update_product_api_v1_products__product_id__patch"];
        trace?: never;
    };
    "/api/v1/products/{product_id}/with-quantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product With Quantity
         * @description Retrieve product with quantity from the database by the product ID, if current user is owner of product.
         */
        get: operations["get_product_with_quantity_api_v1_products__product_id__with_quantity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contracts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Contracts
         * @description Retrieve a list of contracts from the database by the current user ID, counterparty, type or all if current user is superuser.
         */
        get: operations["get_contracts_api_v1_contracts__get"];
        put?: never;
        /**
         * Create Contract
         * @description Create a new contract in the database with the current user ID.
         */
        post: operations["create_contract_api_v1_contracts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contracts/with-total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Contracts With Total
         * @description Retrieve a list of contracts from the database by the current user ID, counterparty, type or all if current user is superuser.
         */
        get: operations["get_contracts_with_total_api_v1_contracts_with_total_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contracts/{contract_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Contract
         * @description Retrieve contract from the database by the contract ID, if current user is partner on contract.
         */
        get: operations["get_contract_api_v1_contracts__contract_id__get"];
        put?: never;
        post?: never;
        /**
         * Update Contract
         * @description Delete contract on the database by the contract ID, if current user is partner on contract.
         */
        delete: operations["update_contract_api_v1_contracts__contract_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Contract
         * @description Update contract on the database by the contract ID, to `contract_data` if current user is partner on contract.
         */
        patch: operations["update_contract_api_v1_contracts__contract_id__patch"];
        trace?: never;
    };
    "/api/v1/contracts/{contract_id}/with-total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Contract With Total By Id
         * @description Retrieve contract from the database with total by the contract ID, if current user is partner on contract.
         */
        get: operations["get_contract_with_total_by_id_api_v1_contracts__contract_id__with_total_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Documents
         * @description Retrieve a list of documents from the database by the current user ID, counterparty, type or all if current user is superuser.
         */
        get: operations["get_documents_api_v1_documents__get"];
        put?: never;
        /**
         * Create Document
         * @description Create a new document in the database with the current user ID.
         */
        post: operations["create_document_api_v1_documents__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/open-invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Open Invoices
         * @description Retrieve a list of invoices which is not closed in warehouse by the current user ID, counterparty, type or all if current user is superuser.
         */
        get: operations["get_open_invoices_api_v1_documents_open_invoices_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document
         * @description Retrieve document from the database by the document ID, if current user is partner on contract.
         */
        get: operations["get_document_api_v1_documents__document_id__get"];
        put?: never;
        post?: never;
        /**
         * Update Document
         * @description Delete document on the database by the document ID, if current user is partner on contract.
         */
        delete: operations["update_document_api_v1_documents__document_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Document
         * @description Update document on the database by the document ID, to `document_data` if current user is partner on contract.
         */
        patch: operations["update_document_api_v1_documents__document_id__patch"];
        trace?: never;
    };
    "/api/v1/contract-products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stock Moves
         * @description Retrieve a list of stock_moves from the database by the current user ID, or all if current user is superuser.
         */
        get: operations["get_stock_moves_api_v1_contract_products__get"];
        put?: never;
        /**
         * Create Stock Move
         * @description Create a new stock_move in the database with the current user ID.
         */
        post: operations["create_stock_move_api_v1_contract_products__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contract-products/{stock_move_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stock Move
         * @description Retrieve stock_move from the database by the stock_move ID, if current user is owner of stock_move.
         */
        get: operations["get_stock_move_api_v1_contract_products__stock_move_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Stock Move
         * @description Delete stock_move on the database by the stock_move ID, if current user is owner of stock_move.
         */
        delete: operations["delete_stock_move_api_v1_contract_products__stock_move_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Stock Move
         * @description Update stock_move on the database by the stock_move ID, to `stock_move_data` if current user is owner of stock_move.
         */
        patch: operations["update_stock_move_api_v1_contract_products__stock_move_id__patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BearerResponse */
        BearerResponse: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** Body_auth_jwt_login_api_v1_auth_login_post */
        Body_auth_jwt_login_api_v1_auth_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /** Body_reset_forgot_password_api_v1_auth_forgot_password_post */
        Body_reset_forgot_password_api_v1_auth_forgot_password_post: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** Body_reset_reset_password_api_v1_auth_reset_password_post */
        Body_reset_reset_password_api_v1_auth_reset_password_post: {
            /** Token */
            token: string;
            /** Password */
            password: string;
        };
        /** Body_verify_request_token_api_v1_auth_request_verify_token_post */
        Body_verify_request_token_api_v1_auth_request_verify_token_post: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** Body_verify_verify_api_v1_auth_verify_post */
        Body_verify_verify_api_v1_auth_verify_post: {
            /** Token */
            token: string;
        };
        /** ContractCreateSchema */
        ContractCreateSchema: {
            /** User Id */
            user_id?: number | null;
            /** Agent Id */
            agent_id: number;
            type: components["schemas"]["ContractTypeENUM"];
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num: string;
            /** Comment */
            comment?: string | null;
        };
        /** ContractReadSchema */
        ContractReadSchema: {
            /** User Id */
            user_id: number;
            /** Agent Id */
            agent_id: number;
            type: components["schemas"]["ContractTypeENUM"];
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num: string;
            /** Comment */
            comment?: string | null;
            /** Id */
            id: number;
        };
        /** ContractReadWithTotalSchema */
        ContractReadWithTotalSchema: {
            /** User Id */
            user_id: number;
            /** Agent Id */
            agent_id: number;
            type: components["schemas"]["ContractTypeENUM"];
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num: string;
            /** Comment */
            comment?: string | null;
            /** Id */
            id: number;
            /** Total */
            total: number;
            /** Total Debit */
            total_debit: number;
            /** Total Credit */
            total_credit: number;
        };
        /**
         * ContractTypeENUM
         * @enum {string}
         */
        ContractTypeENUM: "purchase" | "sales";
        /** ContractUpdateSchema */
        ContractUpdateSchema: {
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num?: string | null;
            /** Comment */
            comment?: string | null;
        };
        /** CounterpartyCreateSchema */
        CounterpartyCreateSchema: {
            /** User Id */
            user_id?: number | null;
            type: components["schemas"]["CounterpartyTypeENUM"];
            /** Name */
            name: string;
            /** Tin */
            tin?: string | null;
            /** Phone */
            phone?: string | null;
            /** Description */
            description?: string | null;
        };
        /** CounterpartyReadSchema */
        CounterpartyReadSchema: {
            /** User Id */
            user_id: number;
            type: components["schemas"]["CounterpartyTypeENUM"];
            /** Name */
            name: string;
            /** Tin */
            tin?: string | null;
            /** Phone */
            phone?: string | null;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
        };
        /** CounterpartyReadWithStatusSchema */
        CounterpartyReadWithStatusSchema: {
            /** User Id */
            user_id: number;
            type: components["schemas"]["CounterpartyTypeENUM"];
            /** Name */
            name: string;
            /** Tin */
            tin?: string | null;
            /** Phone */
            phone?: string | null;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
            /**
             * Status
             * @default 0
             */
            status: number | null;
            /**
             * Total Debit
             * @default 0
             */
            total_debit: number | null;
            /**
             * Total Credit
             * @default 0
             */
            total_credit: number | null;
        };
        /**
         * CounterpartyTypeENUM
         * @enum {string}
         */
        CounterpartyTypeENUM: "supplier" | "customer";
        /** CounterpartyUpdateSchema */
        CounterpartyUpdateSchema: {
            /** Name */
            name?: string | null;
            /** Tin */
            tin?: string | null;
            /** Phone */
            phone?: string | null;
            /** Description */
            description?: string | null;
        };
        /** DocumentCreateSchema */
        DocumentCreateSchema: {
            /** User Id */
            user_id?: number | null;
            /** Contract Id */
            contract_id: number;
            type: components["schemas"]["DocumentTypeENUM"];
            move_type: components["schemas"]["MovementTypeENUM"];
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num?: string | null;
            /** Amount */
            amount: number;
            /** Comment */
            comment?: string | null;
        };
        /** DocumentReadSchema */
        DocumentReadSchema: {
            /** User Id */
            user_id: number;
            /** Contract Id */
            contract_id: number;
            type: components["schemas"]["DocumentTypeENUM"];
            move_type: components["schemas"]["MovementTypeENUM"];
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num?: string | null;
            /** Amount */
            amount: number;
            /** Comment */
            comment?: string | null;
            /** Id */
            id: number;
        };
        /**
         * DocumentTypeENUM
         * @enum {string}
         */
        DocumentTypeENUM: "invoice" | "payment";
        /** DocumentUpdateSchema */
        DocumentUpdateSchema: {
            /** Date */
            date?: string | null;
            /** Doc Num */
            doc_num?: string | null;
            /** Amount */
            amount?: number | null;
            /** Comment */
            comment?: string | null;
        };
        /** ErrorModel */
        ErrorModel: {
            /** Detail */
            detail: string | {
                [key: string]: string;
            };
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InvoiceWithOpenAmountSchema */
        InvoiceWithOpenAmountSchema: {
            invoice: components["schemas"]["DocumentReadSchema"];
            /** Closed Amount */
            closed_amount: number;
            /** Open Amount */
            open_amount: number;
        };
        /**
         * MovementTypeENUM
         * @enum {string}
         */
        MovementTypeENUM: "in" | "out";
        /** ProductCreateSchema */
        ProductCreateSchema: {
            /** User Id */
            user_id?: number | null;
            /** Name */
            name: string;
            /** Sku */
            sku: string;
            /** Unit */
            unit?: string | null;
            /** Price */
            price: number;
            /** Description */
            description?: string | null;
        };
        /** ProductReadSchema */
        ProductReadSchema: {
            /** User Id */
            user_id: number;
            /** Name */
            name: string;
            /** Sku */
            sku: string;
            /** Unit */
            unit?: string | null;
            /** Price */
            price: number;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
        };
        /** ProductReadWithQuantitySchema */
        ProductReadWithQuantitySchema: {
            /** User Id */
            user_id: number;
            /** Name */
            name: string;
            /** Sku */
            sku: string;
            /** Unit */
            unit?: string | null;
            /** Price */
            price: number;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
            /**
             * Quantity
             * @default 0
             */
            quantity: number | null;
            /**
             * Total Incomings
             * @default 0
             */
            total_incomings: number | null;
            /**
             * Total Outgoings
             * @default 0
             */
            total_outgoings: number | null;
        };
        /** ProductUpdateSchema */
        ProductUpdateSchema: {
            /** Name */
            name?: string | null;
            /** Sku */
            sku?: string | null;
            /** Unit */
            unit?: string | null;
            /** Price */
            price?: number | null;
            /** Description */
            description?: string | null;
        };
        /** RefreshIn */
        RefreshIn: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** StockMoveCreateSchema */
        StockMoveCreateSchema: {
            /** User Id */
            user_id?: number | null;
            /** Document Id */
            document_id: number;
            /** Product Id */
            product_id: number;
            movement_type: components["schemas"]["MovementTypeENUM"];
            /** Date */
            date?: string | null;
            /** Quantity */
            quantity: number;
            /** Price */
            price: number;
            /** Comment */
            comment?: string | null;
        };
        /** StockMoveReadSchema */
        StockMoveReadSchema: {
            /** User Id */
            user_id: number;
            /** Document Id */
            document_id: number;
            /** Product Id */
            product_id: number;
            movement_type: components["schemas"]["MovementTypeENUM"];
            /** Date */
            date?: string | null;
            /** Quantity */
            quantity: number;
            /** Price */
            price: number;
            /** Comment */
            comment?: string | null;
            /** Id */
            id: number;
        };
        /** StockMoveUpdateSchema */
        StockMoveUpdateSchema: {
            /** Date */
            date?: string | null;
            /** Quantity */
            quantity?: number | null;
            /** Price */
            price?: number | null;
            /** Comment */
            comment?: string | null;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean | null;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean | null;
            /**
             * Is Verified
             * @default false
             */
            is_verified: boolean | null;
            /** Username */
            username: string;
            /** Name */
            name: string;
            /** Phone */
            phone?: string | null;
            /** Tin */
            tin?: string | null;
        };
        /** UserCreateSchema */
        UserCreateSchema: {
            /** Username */
            username: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /** Phone */
            phone?: string | null;
            /** Tin */
            tin?: string | null;
            /** Hashed Password */
            hashed_password: string;
        };
        /** UserRead */
        UserRead: {
            /** Id */
            id: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Verified
             * @default false
             */
            is_verified: boolean;
            /** Username */
            username: string;
            /** Name */
            name: string;
            /** Phone */
            phone?: string | null;
            /** Tin */
            tin?: string | null;
        };
        /** UserReadSchema */
        UserReadSchema: {
            /** Username */
            username: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /** Phone */
            phone?: string | null;
            /** Tin */
            tin?: string | null;
            /** Id */
            id: number;
        };
        /** UserUpdateSchema */
        UserUpdateSchema: {
            /** Username */
            username?: string | null;
            /** Email */
            email?: string | null;
            /** Name */
            name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Tin */
            tin?: string | null;
            /** Hashed Password */
            hashed_password?: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    auth_jwt_login_api_v1_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_auth_jwt_login_api_v1_auth_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
                     *       "token_type": "bearer"
                     *     } */
                    "application/json": components["schemas"]["BearerResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    auth_jwt_logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Missing token or inactive user. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register_register_api_v1_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_request_token_api_v1_auth_request_verify_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_verify_request_token_api_v1_auth_request_verify_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_verify_api_v1_auth_verify_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_verify_verify_api_v1_auth_verify_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_forgot_password_api_v1_auth_forgot_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_reset_forgot_password_api_v1_auth_forgot_password_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_reset_password_api_v1_auth_reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_reset_reset_password_api_v1_auth_reset_password_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    authenticated_route_api_v1_auth_authenticated_route_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_tokens_api_v1_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_users_api_v1_users__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadSchema"][];
                };
            };
        };
    };
    create_user_api_v1_users__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_me_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadSchema"];
                };
            };
        };
    };
    update_me_api_v1_users_me_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_v1_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_v1_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_v1_users__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_counterparties_api_v1_counterparties__get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
                /** @description filter records by type of counterparty */
                type?: components["schemas"]["CounterpartyTypeENUM"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartyReadSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_counterparty_api_v1_counterparties__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartyCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartyReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_counterparties_with_status_api_v1_counterparties_with_status_get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
                /** @description filter records by type of counterparty */
                type?: components["schemas"]["CounterpartyTypeENUM"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartyReadWithStatusSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_counterparty_api_v1_counterparties__counterparty_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Counterparty ID */
                counterparty_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartyReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_counterparty_api_v1_counterparties__counterparty_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                counterparty_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_counterparty_api_v1_counterparties__counterparty_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                counterparty_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartyUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartyReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_counterparty_with_status_api_v1_counterparties__counterparty_id__with_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Counterparty ID */
                counterparty_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartyReadWithStatusSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_products_api_v1_products__get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductReadSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_product_api_v1_products__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_products_with_quantity_api_v1_products_with_quantity_get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductReadWithQuantitySchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_product_api_v1_products__product_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                product_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_product_api_v1_products__product_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                product_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_product_api_v1_products__product_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                product_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_product_with_quantity_api_v1_products__product_id__with_quantity_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                product_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductReadWithQuantitySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_contracts_api_v1_contracts__get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
                /** @description filter records by Counterparty ID */
                counterparty_id?: number | null;
                /** @description filter records by type of contract */
                type?: components["schemas"]["ContractTypeENUM"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractReadSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_contract_api_v1_contracts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_contracts_with_total_api_v1_contracts_with_total_get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
                /** @description filter records by Counterparty ID */
                counterparty_id?: number | null;
                /** @description filter records by type of contract */
                type?: components["schemas"]["ContractTypeENUM"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractReadWithTotalSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_contract_api_v1_contracts__contract_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                contract_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_contract_api_v1_contracts__contract_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_contract_api_v1_contracts__contract_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_contract_with_total_by_id_api_v1_contracts__contract_id__with_total_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                contract_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractReadWithTotalSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_documents_api_v1_documents__get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
                /** @description filter records by Contract ID */
                contract_id?: number | null;
                /** @description filter records by type of document */
                type?: components["schemas"]["DocumentTypeENUM"] | null;
                /** @description filter records by type of document move */
                move_type?: components["schemas"]["MovementTypeENUM"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentReadSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_document_api_v1_documents__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_open_invoices_api_v1_documents_open_invoices_get: {
        parameters: {
            query?: {
                /** @description filter records by User ID */
                user_id?: number | null;
                /** @description filter records by Contract ID */
                contract_id?: number | null;
                /** @description filter records by type of document */
                type?: components["schemas"]["DocumentTypeENUM"] | null;
                /** @description filter records by type of document move */
                move_type?: components["schemas"]["MovementTypeENUM"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceWithOpenAmountSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_document_api_v1_documents__document_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Document ID */
                document_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_document_api_v1_documents__document_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_document_api_v1_documents__document_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_stock_moves_api_v1_contract_products__get: {
        parameters: {
            query?: {
                /** @description filter records by User ID, if current user is superuser */
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMoveReadSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_stock_move_api_v1_contract_products__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockMoveCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMoveReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_stock_move_api_v1_contract_products__stock_move_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description stock_move ID */
                stock_move_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMoveReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_stock_move_api_v1_contract_products__stock_move_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description stock_move ID */
                stock_move_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_stock_move_api_v1_contract_products__stock_move_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description stock_move ID */
                stock_move_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StockMoveUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockMoveReadSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
